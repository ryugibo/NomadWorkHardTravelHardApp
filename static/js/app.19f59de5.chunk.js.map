{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","undefined","editToDo","setEditToDo","editToDoText","setEditToDoText","endEditTodo","useEffect","a","async","AsyncStorage","getItem","s","JSON","parse","loadToDos","loadWorking","toSave","setItem","stringify","saveWorking","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onChangeText","payload","onSubmitEditing","Date","now","complete","value","returnKeyType","input","placeholder","ScrollView","Object","keys","sort","map","key","toDo","toDoBtn","completeToDo","Fontisto","name","size","flex","toDoEditText","updateToDo","autoFocus","onEndEditing","toDoTextComplete","toDoText","Platform","OS","confirm","newToDos","Alert","alert","deleteToDo","StyleSheet","create","backgroundColor","paddingVertical","justifyContent","flexDirection","marginTop","paddingHorizontal","borderRadius","marginVertical","marginBottom","textDecorationLine"],"mappings":"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","file":"static/js/app.19f59de5.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#1A1C20\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nconst TAB_KEY = \"@tab\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [editToDo, setEditToDo] = useState(undefined);\n  const [editToDoText, setEditToDoText] = useState(\"\");\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const addToDo = () => {\n    if (text === \"\") {\n      return;\n    }\n    setToDos((toDos) => ({\n      ...toDos,\n      [Date.now()]: { text, working, complete: false },\n    }));\n    setText(\"\");\n  };\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (!s) {\n      return;\n    }\n    setToDos(JSON.parse(s));\n  };\n  const deleteToDo = (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Delete To Do?\");\n      if (ok) {\n        setToDos((toDos) => {\n          const newToDos = { ...toDos };\n          delete newToDos[key];\n          return newToDos;\n        });\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        {\n          text: \"Cancel\",\n        },\n        {\n          text: \"OK\",\n          onPress: () => {\n            setToDos((toDos) => {\n              const newToDos = { ...toDos };\n              delete newToDos[key];\n              return newToDos;\n            });\n          },\n        },\n      ]);\n    }\n  };\n  const completeToDo = (key) => {\n    setToDos((toDos) => ({\n      ...toDos,\n      [key]: { ...toDos[key], complete: !toDos[key].complete },\n    }));\n  };\n  const saveWorking = async (working) => {\n    await AsyncStorage.setItem(TAB_KEY, JSON.stringify(working));\n  };\n  const loadWorking = async () => {\n    const s = await AsyncStorage.getItem(TAB_KEY);\n    if (!s) {\n      return;\n    }\n    setWorking(JSON.parse(s));\n  };\n  const updateToDo = (key) => {\n    setToDos((toDos) => ({\n      ...toDos,\n      [key]: { ...toDos[key], text: editToDoText },\n    }));\n    endEditTodo();\n  };\n  const endEditTodo = () => {\n    setEditToDo(undefined);\n    setEditToDoText(\"\");\n  };\n\n  useEffect(() => {\n    loadToDos();\n    loadWorking();\n  }, []);\n  useEffect(() => {\n    saveToDos(toDos);\n  }, [toDos]);\n  useEffect(() => {\n    saveWorking(working);\n  }, [working]);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 38,\n              fontWeight: \"600\",\n              color: working ? theme.grey : \"white\",\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onChangeText={onChangeText}\n        onSubmitEditing={addToDo}\n        value={text}\n        returnKeyType=\"done\"\n        style={styles.input}\n        placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n      />\n      <ScrollView>\n        {Object.keys(toDos)\n          .sort()\n          .map((key) =>\n            toDos[key].working === working ? (\n              <View style={styles.toDo} key={key}>\n                <TouchableOpacity\n                  style={styles.toDoBtn}\n                  onPress={() => completeToDo(key)}\n                >\n                  <Text>\n                    {toDos[key].complete ? (\n                      <Fontisto\n                        name=\"checkbox-active\"\n                        color={theme.grey}\n                        size={18}\n                      />\n                    ) : (\n                      <Fontisto\n                        name=\"checkbox-passive\"\n                        color=\"white\"\n                        size={18}\n                      />\n                    )}\n                  </Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={{ flex: 1 }}\n                  onPress={() => {\n                    setEditToDo(key);\n                    setEditToDoText(toDos[key].text);\n                  }}\n                >\n                  {key === editToDo ? (\n                    <TextInput\n                      style={styles.toDoEditText}\n                      onChangeText={setEditToDoText}\n                      onSubmitEditing={() => updateToDo(key)}\n                      value={editToDoText}\n                      returnKeyType=\"done\"\n                      autoFocus={true}\n                      onEndEditing={endEditTodo}\n                    />\n                  ) : (\n                    <Text\n                      style={\n                        toDos[key].complete\n                          ? styles.toDoTextComplete\n                          : styles.toDoText\n                      }\n                    >\n                      {toDos[key].text}\n                    </Text>\n                  )}\n                </TouchableOpacity>\n                <TouchableOpacity\n                  style={styles.toDoBtn}\n                  onPress={() => deleteToDo(key)}\n                >\n                  <Text>\n                    <Fontisto name=\"trash\" color={theme.grey} size={18} />\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            ) : null\n          )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingVertical: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n    flex: 1,\n  },\n  toDoTextComplete: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n    flex: 1,\n    textDecorationLine: \"line-through\",\n    color: theme.grey,\n  },\n  toDoEditText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n    flex: 1,\n  },\n  toDoBtn: {\n    paddingHorizontal: 20,\n  },\n});\n"],"sourceRoot":""}